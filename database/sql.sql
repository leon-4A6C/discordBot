-- MySQL Script generated by MySQL Workbench
-- Fri 12 May 2017 10:27:24 AM CEST
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema DiscordBot
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `DiscordBot` ;

-- -----------------------------------------------------
-- Schema DiscordBot
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `DiscordBot` DEFAULT CHARACTER SET utf8 ;
USE `DiscordBot` ;

-- -----------------------------------------------------
-- Table `DiscordBot`.`user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DiscordBot`.`user` ;

CREATE TABLE IF NOT EXISTS `DiscordBot`.`user` (
  `id` BIGINT NOT NULL,
  `xp` INT NULL,
  `rights_lvl` INT NULL,
  `username` VARCHAR(256) NOT NULL,
  `nickname` VARCHAR(256) NOT NULL,
  `botHistory` LONGTEXT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DiscordBot`.`server`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DiscordBot`.`server` ;

CREATE TABLE IF NOT EXISTS `DiscordBot`.`server` (
  `id` BIGINT NOT NULL,
  `name` VARCHAR(256) NOT NULL,
  PRIMARY KEY (`id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DiscordBot`.`server_has_user`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DiscordBot`.`server_has_user` ;

CREATE TABLE IF NOT EXISTS `DiscordBot`.`server_has_user` (
  `server_id` BIGINT NOT NULL,
  `user_id` BIGINT NOT NULL,
  PRIMARY KEY (`server_id`, `user_id`),
  INDEX `fk_server_has_user_user1_idx` (`user_id` ASC),
  INDEX `fk_server_has_user_server_idx` (`server_id` ASC),
  CONSTRAINT `fk_server_has_user_server`
    FOREIGN KEY (`server_id`)
    REFERENCES `DiscordBot`.`server` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_server_has_user_user1`
    FOREIGN KEY (`user_id`)
    REFERENCES `DiscordBot`.`user` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DiscordBot`.`roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DiscordBot`.`roles` ;

CREATE TABLE IF NOT EXISTS `DiscordBot`.`roles` (
  `rights_lvl` INT NOT NULL,
  `name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`rights_lvl`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `DiscordBot`.`server_has_roles`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `DiscordBot`.`server_has_roles` ;

CREATE TABLE IF NOT EXISTS `DiscordBot`.`server_has_roles` (
  `server_id` BIGINT NOT NULL,
  `roles_rights_lvl` INT NOT NULL,
  PRIMARY KEY (`server_id`, `roles_rights_lvl`),
  INDEX `fk_server_has_roles_roles1_idx` (`roles_rights_lvl` ASC),
  INDEX `fk_server_has_roles_server1_idx` (`server_id` ASC),
  CONSTRAINT `fk_server_has_roles_server1`
    FOREIGN KEY (`server_id`)
    REFERENCES `DiscordBot`.`server` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_server_has_roles_roles1`
    FOREIGN KEY (`roles_rights_lvl`)
    REFERENCES `DiscordBot`.`roles` (`rights_lvl`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
